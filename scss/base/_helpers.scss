// Transform pixels to REMs
// ------------------------------------------------------
// Use in context:
// .foo {
//   font-size: rem(12px);
// }
//
@function rem($pixels, $context: $font-size-global) {
  @if (unitless($pixels)) {
    $pixels: $pixels * 1px;
  }
  @if (unitless($context)) {
    $context: $context * 1px;
  }
  @return $pixels / $context * 1rem;
}

// Breakpoints
// ------------------------------------------------------
// *Note: See _variables.scss for breakpoint definitions
// Use in context:
// .foo {
//   color: blue;
//   @include breakpoint("small") {
//     color: green;
//   }
// }
//
@mixin breakpoint($bp, $rule: min-width) {
  @if map-has-key($breakpoints, $bp) {
    @media screen and (#{$rule}: map-get($breakpoints, $bp)) {
      @content;
    }
  } @else {
    @error "Invalid breakpoint name `#{$bp}`.";
  }
}

// Z-indexes (thanks Eric Bailey)
// ------------------------------------------------------
// *Note: See _variables.scss for z-index definitions
// Use in context:
// .foo {
//   z-index: get-z-index("basement");
// }
//
@function get-z-index($index) {
  @return map-get($z-index, $index);
}

// Vertically and horizontally align
// ------------------------------------------------------
// *Note: set value on $justify to change horizontal alignment
// Use in context:
// .foo {
//   @include x-y-centered;
// }
//
@mixin x-y-centered($display: flex, $justify: center) {
  align-items: center;
  display: $display;
  justify-content: $justify;
}
